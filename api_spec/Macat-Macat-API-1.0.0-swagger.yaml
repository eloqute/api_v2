openapi: 3.0.0
info:
  description: This is the Macat Digital Library MVP.
  version: 1.0.0
  title: Macat MVP
  contact:
    email: tim@timcowlishaw.co.uk
tags:
  - name: open
    description: Operations which do not require authentication.
  - name: closed
    description: |-
      Operations which require a valid user session
      (set by a previous request to POST /sessions).
  - name: paywalled
    description: Operations which require a valid user session AND a previous payment for
      the given resource.
paths:
  /users:
    post:
      summary: Registers a new user
      tags:
        - open
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - passwordConfirmation
              properties:
                email:
                  type: string
                  example: user@example.com
                password:
                  type: string
                  example: TrustNo1
                passwordConfirmation:
                  type: string
                  example: TrustNo1
      responses:
        "201":
          description: The user is successfully created, we return their id and role
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/User"
        "422":
          description: The user details provided were not valid
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ValidationError"
  /session:
    post:
      summary: Creates a new session for a registered user
      tags:
        - open
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  example: user@example.com
                password:
                  type: string
                  example: TrustNo1
      responses:
        "201":
          description: The user is successfully retrieved, we return their id and role
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/User"
          headers:
            Set-Cookie:
              schema:
                type: string
                example: connect.sid=s:ZAnz-hwGsu6uukVQZCAFudBuxr4upAWN.HGObjQYKz9gOpV8oyYYdukG6cPaGQVH531wi/oXR6ro
        "401":
          description: The user details provided were not valid
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Error"
    get:
      summary: Displays the current session if it exists
      tags:
        - open
      parameters :
        - name: connect.sid
          in: cookie
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The user is successfully retrieved, we return their id and role
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: No session exists for the current user
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Ends the current session if it exists
      tags:
        - open
      parameters :
        - name: connect.sid
          in: cookie
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The session is succesfully ended
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Message"
        "404":
          description: No session exists for the current user
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Error"
  /structure:
    get:
      tags:
        - open
      responses:
        "200":
          description: The page structure for the analysis is succesfully returned
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SectionStructure"
  "/book/{publicationURL}/overview":
    get:
      tags:
        - closed
      parameters:
        - name: publicationURL
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The overview of the book is successfully returned
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/BookOverview"
        "404":
          description: the book does not exist
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Error"
  "/book/{publicationURL}/content/{sectionNum}/{moduleNum}/{contentType}":
    get:
      tags:
        - paywalled
      parameters:
        - name: publicationURL
          in: path
          required: true
          schema:
            type: string
        - name: sectionNum
          in: path
          required: true
          schema:
            type: integer
        - name: moduleNum
          in: path
          required: true
          schema:
            type: integer
        - name: contentType
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The content items for this section / module / type are returned
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ContentItem"

        "401":
          description: The user is not logged in
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: The content item does not exist
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    User:
      additionalProperties: false
      properties:
        id:
          type: string
          example: aaadcde9-d877-436a-b66b-19acd31d2574
        email:
          type: string
          example: user@example.com
        role:
          $ref: "#/components/schemas/Role"
      required:
        - id
        - email
    Role:
      additionalProperties: false
      properties:
        name:
          type: string
          enum:
            - user
            - admin
      required:
        - name
    ValidationIssue:
      additionalProperties: false
      properties:
        field:
          type: string
          example: passwordConfirmation
        message:
          type: string
          example: does not match given password
      required:
        - field
        - message
    Message:
      properties:
        status:
          type: integer
          example: 422
        message:
          type: string
          example: the parameters provided failed validation
      required:
        - status
        - message
    Error:
      allOf:
        - $ref: "#/components/schemas/Message"
    ValidationError:
      allOf:
        - $ref: "#/components/schemas/Error"
        - properties:
            issues:
              type: array
              items:
                $ref: "#/components/schemas/ValidationIssue"
          required:
            - issues
    Redirect:
      properties:
        status:
          type: integer
          example: 301
        location:
          type: string
          example: "http://example.com"
      required:
        - status
        - location
    ModuleStructure:
      additionalProperties: false
      type: object
      properties:
        title:
          type: string
          nullable: true
          example: "Module 1: The Author And The Historical Context"
        content:
          type: array
          items:
            type: string
      required:
        - content
      description: A module of the analysis, gives order and content types
    SectionStructure:
      additionalProperties: false
      type: object
      properties:
        title:
          type: string
          example: Ways In To The Text
        modules:
          type: array
          items:
            $ref: "#/components/schemas/ModuleStructure"
      required:
        - title
        - modules
      description: The general structure of the analysis, gives order and content types
    BookOverview:
      additionalProperties: false
      type: object
      properties:
        publicationURL:
          type: string
          example: gender-trouble-feminism-and-the-subversion-of-identity--analysis
        title:
          type: string
          example: Gender Trouble
        ISBN:
          type: string
          example: "9781912127764"
        synopsis:
          type: string
          example: The synopsis of the book
        overview:
          type: string
          example: The overview of the book
        id:
          type: string
          example: "c602f351-cea6-46d0-8ab6-813e77dc1728"
        authors:
          type: array
          items:
            $ref: "#/components/schemas/Author"
      required:
        - authors
        - id
        - publicationURL
        - title
        - ISBN
        - synopsis
        - overview
    Author:
      additionalProperties: false
      type: object
      properties:
        position:
          type: integer
          example: 0
        isTopicAuthor:
          type: boolean
          example: true
        id:
          type: string
          example: "1edf74e7-bb04-4ed4-b1aa-9e9dd678ed47"
        name:
          type: string
          example: Judith Butler
        biography:
          type: string
          example: American philosopher and gender theorist Judith Butler was born in
            Ohio in 1956...
        isAlive:
          type: boolean
          example: true
      required:
        - position
        - isTopicAuthor
        - id
        - name
        - biography
        - isAlive
    ContentItem:
      additionalProperties: false
      type: object
      properties:
        ISBN:
          type: string
          example: "9781912453085"
        section:
          type: integer
          example: 0
        module:
          type: integer
          example: 0
        position:
          type: integer
          example: 0
        contentType:
          type: string
          example: KeyPoints
        content:
          type: string
          example: Michel Foucault (1926-1984) was a French philosopher and historian.
      required:
        - ISBN
        - section
        - module
        - position
        - contentType
        - content
